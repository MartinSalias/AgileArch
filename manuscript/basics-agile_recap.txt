
{pagebreak}

## Agile Recap

As Agile Methodologies decreases focus on written documentation in favor of oral and visual communication, I will start using my colleague Pablitux's poster to review the Agile Manifesto:

![Agile Manifesto (by @pablitux)](images/agile_manifesto.png)

The text of the Manifesto says:

> We are uncovering better ways of developing software by doing it and helping others do it.

> Through this work we have come to value:

>>    **Individuals and interactions** over processes and tools
>>    **Working software** over comprehensive documentation
>>    **Customer collaboration** over contract negotiation
>>    **Responding to change** over following a plan

> That is, while there is value in the items on the right, we value the items on the left more.

Let's re-read these values from an architectural viewpoint, and ask some questions:

- Who are the Individuals in this case?
- Isn't architecture mostly about processes and tool?
- Can we build working architecture without comprehensive documentation?
- Who are our customers when we build (or install) architecture components?
- Do we have a contract?
- Are we capable of changing our architecture when needed, instead of sticking to our prescribed model?


### My personal view on Agile

After almost 20 years working under the agile paradigm, starting with the early XP days by the late 90s, as you might expect, I have some strong opinions about this model and its impact in the industry and the community.

I don't think  my ideas are particularly original or important, but as the book moves into the model I found to put them to work into software architecture, I think it is important to tell you about some of them, even if this serves to set some disagreement early on.

So here I go:

#### Agile is a cultural approach

I find the frequent usage of "Agile Methodologies" somewhat unfortunate. Some people still thinks that Agile is just a different way to run projects, but it is way beyond this. As Kent Beck used to say about XP, it is about _social change_.

As pretentious as **social change** might sound, Agile is mostly about moving from _centralized_ decision-making and high-specialization to an environment of _shared_ decision-making and high-collaboration. This is somehow subversive in the sense of potentially breaking chain of commands, which quickly push for a different distribution of money, power, knowledge and so on.

Of course, this is an ideal, but it is there, and I believe that continuous improvement only can get you close to that. Otherwise, improvement will slow down and probably stale.

#### Agility requires Quality

Quality in execution comes from avoiding shortcuts and being transparent about what you do, without looking for someone to blame when things fail, but looking for underlying problem and fixing root causes.

Transparency, introspection and improvement are core values of Agile, and that's what one things brings to the other.

Moreover, Technical Excellence is one of the principles stated in the Manifesto, and is one of the distinctive traits one consistently finds in succeeding Agile teams. Indeed, many teams adopting Agile can get great results at first, but quickly get in trouble when neglecting technical improvement. This pattern was so common that even Ken Schwaber (one of the _fathers_ of Scrum) started using the term "Flaccid Scrum" to describe the problem.
